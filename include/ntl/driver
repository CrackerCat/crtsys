/**
 * @file driver
 * @author jungkwang.lee (ntoskrnl7@google.com)
 * @brief
 *
 * @copyright Copyright (c) 2022 NT Template Library Authoers.
 *
 */
#pragma once

#ifndef _NTDDK_
#include <wdm.h>
#endif
#ifndef ClearFlag
#define ClearFlag(_F, _SF) ((_F) &= ~(_SF))
#endif

#include "device"
#include "except"
#include "status"
#include "unicode_string"
#include <algorithm>
#include <functional>
#include <memory>
#include <unordered_map>

namespace ntl {
namespace detail {
namespace driver {
inline ntl::except make_exception(NTSTATUS status) {
  const char *message;
  switch (status) {
  case STATUS_INSUFFICIENT_RESOURCES:
    message = " Insufficient system resources exist to complete the API.";
    break;
  case STATUS_OBJECT_NAME_COLLISION:
    message = "Object Name already exists.";
    break;
  default:
    message = "Unknown error.";
    break;
  }
  return std::move(ntl::except(status, message));
}
} // namespace driver
} // namespace detail

class driver {
  friend class driver_initializer;
  friend class driver_unload_invoker;

private:
  driver(PDRIVER_OBJECT driver)
      : object_(driver), name_(driver->DriverName.Buffer,
                               driver->DriverName.Length / sizeof(WCHAR)) {}

public:
  using unload_routine = std::function<void()>;

  using devcie_control_routine = std::function<void(
      uint32_t, const uint8_t *, size_t, uint8_t *, size_t *)>;

  template <typename Extension>
  std::shared_ptr<device> create_device(device::options &opts) {
    PDEVICE_OBJECT dev = NULL;
    status s = [&dev, &opts, this]() {
      ULONG extension_size = (ULONG)sizeof(device::context<Extension>);
      if (opts.name_.empty()) {
        return IoCreateDevice(object_, extension_size, NULL, opts.type_, 0,
                              opts.exclusive_, &dev);
      } else {
        unicode_string dev_name(L"\\Device\\" + opts.name_);
        return IoCreateDevice(object_, extension_size, &*dev_name, opts.type_,
                              0, opts.exclusive_, &dev);
      }
    }();
    if (s.is_err())
      throw detail::driver::make_exception(s);

    new (dev->DeviceExtension) device::context<Extension>();

    auto ptr = std::make_shared<device>(std::move(device(dev, opts, [dev]() {
      reinterpret_cast<device::context<Extension> *>(dev->DeviceExtension)
          ->~context();
    })));
    devices_.insert({dev, ptr});

    ClearFlag(dev->Flags, DO_DEVICE_INITIALIZING);

    return ptr;
  }

  void on_unload(unload_routine &&f) { unload_routine_ = f; }

  std::shared_ptr<device> devices(PDEVICE_OBJECT ptr) noexcept {
    try {
      return devices_[ptr];
    } catch (...) {
      return nullptr;
    }
  };

  std::vector<std::shared_ptr<device>> devices() {
    std::vector<std::shared_ptr<device>> vec;
    std::transform(devices_.begin(), devices_.end(), vec.end(),
                   [](auto &item) { return item.second; });
    return vec;
  }

  const std::wstring &name() const { return name_; }

private:
  PDRIVER_OBJECT object_;
  std::wstring name_;

  std::unordered_map<PDEVICE_OBJECT, std::shared_ptr<device>> devices_;
  unload_routine unload_routine_;
};

#if _X86_
// warning C4007: 'main' : must be '__cdecl'
#pragma warning(disable : 4007)
#endif
status main(driver &driver, const std::wstring &registry_path);
} // namespace ntl