/**
 * @file device
 * @author jungkwang.lee (ntoskrnl7@google.com)
 * @brief
 *
 * @copyright Copyright (c) 2022 NT Template Library Authoers.
 *
 */
#pragma once

#include "except"
#include <functional>
#include <stdexcept>
#include <string>

#ifndef _NTDDK_
#include <wdm.h>
#endif

namespace ntl {
namespace device_control {
struct code {
  code(ULONG code) : value(code) {}

  auto device_type() const { return DEVICE_TYPE_FROM_CTL_CODE(value); }
  auto method() const { return METHOD_FROM_CTL_CODE(value); }
  auto function() const { return IoGetFunctionCodeFromCtlCode(value); }
  bool operator==(const code &rhs) const { return value == rhs.value; }
  bool operator==(ULONG rhs) const { return value == rhs; }
  bool operator==(int rhs) const { return value == static_cast<ULONG>(rhs); }

  ULONG value;
};

struct in_buffer {
  in_buffer(const void *ptr, size_t size) : ptr(ptr), size(size) {}
  const void *ptr;
  size_t size;
};

struct out_buffer {
  out_buffer(void *ptr, size_t size) : ptr(ptr), size(size) {}
  void *ptr;
  size_t size;
};

using dispatch_fn = std::function<void(const device_control::code &,
                                       const device_control::in_buffer &,
                                       device_control::out_buffer &)>;
} // namespace device_control
} // namespace ntl

namespace ntl {

namespace detail {

struct device_dispatchers {
  device_control::dispatch_fn on_device_control;
};

template <typename Extension> struct device_extension_data;

template <> struct device_extension_data<void> {
  device_dispatchers dispatchers;
};

template <typename Extension> struct device_extension_data {
  device_dispatchers dispatchers;
  Extension data;
};

template <typename T> class device_extension;

template <> class device_extension<void> {
public:
  device_extension() : device_(nullptr) {}
  device_extension(PDEVICE_OBJECT device) : device_(device) {}

  detail::device_extension_data<void> *get_context() {
    return reinterpret_cast<detail::device_extension_data<void> *>(
        device_->DeviceExtension);
  }

private:
  PDEVICE_OBJECT device_;
};

template <typename Extension> class device_extension {
public:
  device_extension() : device_(nullptr) {}
  device_extension(PDEVICE_OBJECT device) : device_(device) {}

  detail::device_extension_data<Extension> *get_context() {
    return reinterpret_cast<detail::device_extension_data<Extension> *>(
        device_->DeviceExtension);
  }

  Extension &extension() { return get_context()->data; }

private:
  PDEVICE_OBJECT device_;
};
} // namespace detail

using device_type = DEVICE_TYPE;

class device_options {
  friend class driver;

public:
  device_options() : type_(FILE_DEVICE_UNKNOWN), exclusive_(false) {}

  device_options &name(const std::wstring &name) {
    name_ = name;
    return *this;
  }
  device_options &type(device_type type) {
    type_ = type;
    return *this;
  }
  device_options &exclusive(bool exclusive = true) {
    exclusive_ = exclusive;
    return *this;
  }

  const std::wstring &name() const { return name_; }
  device_type type() const { return type_; }
  bool exclusive() const { return exclusive_; }

private:
  bool exclusive_;
  std::wstring name_;
  device_type type_;
};

template <typename Extension>
class device : public detail::device_extension<Extension> {
  friend class device_dispatch_invoker;
  friend class driver;

protected:
  device(PDEVICE_OBJECT device, const device_options &opts)
      : detail::device_extension<Extension>(device), object_(device),
        name_(opts.name()) {}

private:
  device(const device &) = delete;

public:
  device() : object_(nullptr) {}

  device(device &&other) : detail::device_extension<Extension>(other.object_) {
    *this = std::move(other);
  }

  device &operator=(device &&rhs) {
    object_ = rhs.detach();
    name_.swap(rhs.name_);
    return *this;
  }

  ~device() {
    auto obj = detach();
    if (obj) {
      if (obj->DeviceExtension)
        reinterpret_cast<detail::device_extension_data<Extension> *>(
            obj->DeviceExtension)
            ->~device_extension_data();
      IoDeleteDevice(obj);
    }
  }

protected:
  detail::device_dispatchers &dispatchers() {
    return detail::device_extension<Extension>::get_context()->dispatchers;
  }

public:
  device &on_device_control(device_control::dispatch_fn &&f) {
    dispatchers().on_device_control = f;
    return *this;
  }

  const std::wstring &name() const {
    if (!object_)
      throw std::runtime_error("invalid device object.");
    return name_;
  }

  device_type type() const {
    if (!object_)
      throw std::runtime_error("invalid device object.");
    return object_->DeviceType;
  }

  PDEVICE_OBJECT detach() {
    return reinterpret_cast<PDEVICE_OBJECT>(
        InterlockedExchangePointer(reinterpret_cast<PVOID *>(&object_), NULL));
  }

private:
  PDEVICE_OBJECT object_;
  std::wstring name_;
};
} // namespace ntl